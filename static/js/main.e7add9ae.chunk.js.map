{"version":3,"sources":["Nav.js","Col.js","Row.js","Canvas.js","App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","className","onClick","this","props","addRow","removeRow","addCol","removeCol","fill","fillAll","React","Component","Col","style","background","color","Row","cols","map","src_Col","Canvas","rows","row","src_Row","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","defaultColor","currentColor","bind","assertThisInitialized","newRows","i","newRow","j","push","setState","length","pop","oldRows","src_Nav","src_Canvas","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAkBeA,mLAdP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAAb,aACAH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBC,QAASC,KAAKC,MAAMC,QAAxD,SACAP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBC,QAASC,KAAKC,MAAME,WAAxD,SACAR,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBC,QAASC,KAAKC,MAAMG,QAAxD,SACAT,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBC,QAASC,KAAKC,MAAMI,WAAxD,SACAV,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBC,QAASC,KAAKC,MAAMK,MAAxD,QACAX,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBC,QAASC,KAAKC,MAAMM,SAAxD,oBAVMC,IAAMC,WCQTC,mLANP,OACIf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaa,MAAO,CAACC,WAAYZ,KAAKC,MAAMY,gBAHrDL,IAAMC,WCaTK,mLAVP,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACZE,KAAKC,MAAMc,KAAKC,IAAI,SAAAH,GAAK,OACtBlB,EAAAC,EAAAC,cAACoB,EAAD,CAAKJ,MAAOA,cALVL,IAAMC,WCYTS,mLAVP,OACIvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACZE,KAAKC,MAAMkB,KAAKH,IAAI,SAAAI,GAAG,OACpBzB,EAAAC,EAAAC,cAACwB,EAAD,CAAKN,KAAMK,cALRZ,IAAMC,WCuHZa,qBApHX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAxB,KAAAsB,IACVC,EAAAC,OAAAE,EAAA,EAAAF,CAAAxB,KAAAwB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA5B,QACK6B,MAAQ,CACTV,KAAM,GACNW,aAAc,QACdC,aAAc,OAGlBR,EAAKrB,OAASqB,EAAKrB,OAAO8B,KAAZR,OAAAS,EAAA,EAAAT,CAAAD,IACdA,EAAKpB,UAAYoB,EAAKpB,UAAU6B,KAAfR,OAAAS,EAAA,EAAAT,CAAAD,IACjBA,EAAKnB,OAASmB,EAAKnB,OAAO4B,KAAZR,OAAAS,EAAA,EAAAT,CAAAD,IACdA,EAAKlB,UAAYkB,EAAKlB,UAAU2B,KAAfR,OAAAS,EAAA,EAAAT,CAAAD,IACjBA,EAAKhB,QAAUgB,EAAKhB,QAAQyB,KAAbR,OAAAS,EAAA,EAAAT,CAAAD,IACfA,EAAKjB,KAAOiB,EAAKjB,KAAK0B,KAAVR,OAAAS,EAAA,EAAAT,CAAAD,IAbFA,mFAkBV,IADA,IAAIW,EAAU,GACLC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAExB,IADA,IAAIC,EAAS,GACJC,EAAI,EAAGA,EAAI,EAAGA,IACnBD,EAAOE,KAAKtC,KAAK6B,MAAMC,cAE3BI,EAAQI,KAAKF,GAEjBpC,KAAKuC,SAAS,CAACpB,KAAMe,qCAIrB,IAAIA,EAAUlC,KAAK6B,MAAMV,KACrBiB,EAAS,GACb,GAAuB,IAAnBF,EAAQM,OACR,IAAK,IAAIL,EAAI,EAAGA,EAAI,EAAGA,IACnBC,EAAOE,KAAK,aAGhB,IAAK,IAAIH,EAAI,EAAGA,EAAID,EAAQ,GAAGM,OAAQL,IACnCC,EAAOE,KAAK,QAGpBJ,EAAQI,KAAKF,GACbpC,KAAKuC,SAAS,CAACpB,KAAMe,wCAIrB,IAAIA,EAAUlC,KAAK6B,MAAMV,KACzBe,EAAQO,MAERzC,KAAKuC,SAAS,CAACpB,KAAMe,qCAMrB,IAFA,IAAIA,EAAUlC,KAAK6B,MAAMV,KAEhBgB,EAAI,EAAGA,EAAID,EAAQM,OAAQL,IAChCD,EAAQC,GAAGG,KAAKtC,KAAK6B,MAAMC,cAE/B9B,KAAKuC,SAAS,CAACpB,KAAMe,wCAMrB,IAFA,IAAIA,EAAUlC,KAAK6B,MAAMV,KAEhBgB,EAAI,EAAGA,EAAID,EAAQM,OAAQL,IAChCD,EAAQC,GAAGM,MAEfzC,KAAKuC,SAAS,CAACpB,KAAMe,mCAMrB,IAFA,IAAIQ,EAAU1C,KAAK6B,MAAMV,KACrBe,EAAU,GACLC,EAAI,EAAGA,EAAIO,EAAQF,OAAQL,IAAK,CAErC,IADA,IAAIC,EAAS,GACJC,EAAI,EAAGA,EAAIK,EAAQP,GAAGK,OAAQH,IAC/BK,EAAQP,GAAGE,IAAMrC,KAAK6B,MAAMC,aAC5BM,EAAOE,KAAKtC,KAAK6B,MAAME,cAEvBK,EAAOE,KAAKI,EAAQP,GAAGE,IAG/BH,EAAQI,KAAKF,GAEjBpC,KAAKuC,SAAS,CAACpB,KAAMe,sCAMrB,IAFA,IAAIQ,EAAU1C,KAAK6B,MAAMV,KACrBe,EAAU,GACLC,EAAI,EAAGA,EAAIO,EAAQF,OAAQL,IAAK,CAErC,IADA,IAAIC,EAAS,GACJC,EAAI,EAAGA,EAAIK,EAAQP,GAAGK,OAAQH,IACnCD,EAAOE,KAAKtC,KAAK6B,MAAME,cAE3BG,EAAQI,KAAKF,GAEjBpC,KAAKuC,SAAS,CAACpB,KAAMe,qCAIrB,OACIvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAC8C,EAAD,CACEzC,OAAQF,KAAKE,OACbC,UAAWH,KAAKG,UAChBC,OAAQJ,KAAKI,OACbC,UAAWL,KAAKK,UAChBC,KAAMN,KAAKM,KACXC,QAASP,KAAKO,UAEhBZ,EAAAC,EAAAC,cAAC+C,EAAD,CAAQzB,KAAMnB,KAAK6B,MAAMV,eA/GrBX,IAAMC,YCOJoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e7add9ae.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nclass Nav extends React.Component {\r\n    render() {\r\n        return (\r\n          <div className=\"navbar\">\r\n            <h className=\"nav-element title\">pixel art</h>\r\n            <button className=\"nav-element btn\" onClick={this.props.addRow}>Row +</button>\r\n            <button className=\"nav-element btn\" onClick={this.props.removeRow}>Row -</button>\r\n            <button className=\"nav-element btn\" onClick={this.props.addCol}>Col +</button>\r\n            <button className=\"nav-element btn\" onClick={this.props.removeCol}>Col -</button>\r\n            <button className=\"nav-element btn\" onClick={this.props.fill}>Fill</button>\r\n            <button className=\"nav-element btn\" onClick={this.props.fillAll}>Fill All</button>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\"\r\n\r\nclass Col extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"canvas-col\" style={{background: this.props.color}}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Col;","import React from \"react\"\r\nimport Col from \"./Col.js\"\r\n\r\nclass Row extends React.Component {\r\n    render() {\r\n        return(\r\n          <div className=\"canvas-row\">\r\n            {this.props.cols.map(color => (\r\n                <Col color={color}/>\r\n            ))}\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Row;","import React from \"react\"\r\nimport Row from \"./Row.js\"\r\n\r\nclass Canvas extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"canvas-container\">\r\n              {this.props.rows.map(row => (\r\n                  <Row cols={row}/>\r\n              ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Canvas;","import React from \"react\"\r\nimport Nav from \"./Nav.js\"\r\nimport Canvas from \"./Canvas.js\"\r\nimport \"./App.css\"\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            rows: [],\r\n            defaultColor: \"white\",\r\n            currentColor: \"red\"\r\n        }\r\n\r\n        this.addRow = this.addRow.bind(this);\r\n        this.removeRow = this.removeRow.bind(this);\r\n        this.addCol = this.addCol.bind(this);\r\n        this.removeCol = this.removeCol.bind(this);\r\n        this.fillAll = this.fillAll.bind(this);\r\n        this.fill = this.fill.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let newRows = [];\r\n        for (let i = 0; i < 6; i++) {\r\n            let newRow = []\r\n            for (let j = 0; j < 6; j++) {\r\n                newRow.push(this.state.defaultColor);\r\n            }\r\n            newRows.push(newRow);\r\n        }\r\n        this.setState({rows: newRows});\r\n    }\r\n\r\n    addRow() {\r\n        let newRows = this.state.rows;\r\n        let newRow = [];\r\n        if (newRows.length === 0){\r\n            for (let i = 0; i < 6; i++){\r\n                newRow.push(\"grey\");\r\n            }\r\n        } else{\r\n            for (let i = 0; i < newRows[0].length; i++) {\r\n                newRow.push(\"grey\");\r\n            }\r\n        }\r\n        newRows.push(newRow);\r\n        this.setState({rows: newRows});\r\n    }\r\n\r\n    removeRow() {\r\n        let newRows = this.state.rows;\r\n        newRows.pop()\r\n\r\n        this.setState({rows: newRows});\r\n    }\r\n\r\n    addCol() {\r\n        let newRows = this.state.rows;\r\n\r\n        for (let i = 0; i < newRows.length; i++) {\r\n            newRows[i].push(this.state.defaultColor);\r\n        }\r\n        this.setState({rows: newRows});\r\n    }\r\n\r\n    removeCol() {\r\n        let newRows = this.state.rows;\r\n\r\n        for (let i = 0; i < newRows.length; i++) {\r\n            newRows[i].pop();\r\n        }\r\n        this.setState({rows: newRows});\r\n    }\r\n\r\n    fill() {\r\n        let oldRows = this.state.rows;\r\n        let newRows = [];\r\n        for (let i = 0; i < oldRows.length; i++) {\r\n            let newRow = []\r\n            for (let j = 0; j < oldRows[i].length; j++) {\r\n                if (oldRows[i][j] == this.state.defaultColor) {\r\n                    newRow.push(this.state.currentColor);\r\n                } else {\r\n                    newRow.push(oldRows[i][j]);\r\n                }\r\n            }\r\n            newRows.push(newRow);\r\n        }\r\n        this.setState({rows: newRows});\r\n    }\r\n\r\n    fillAll() {\r\n        let oldRows = this.state.rows;\r\n        let newRows = [];\r\n        for (let i = 0; i < oldRows.length; i++) {\r\n            let newRow = []\r\n            for (let j = 0; j < oldRows[i].length; j++) {\r\n                newRow.push(this.state.currentColor);\r\n            }\r\n            newRows.push(newRow);\r\n        }\r\n        this.setState({rows: newRows});\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"app-container\">\r\n              <Nav \r\n                addRow={this.addRow}\r\n                removeRow={this.removeRow}\r\n                addCol={this.addCol}\r\n                removeCol={this.removeCol}\r\n                fill={this.fill}\r\n                fillAll={this.fillAll}\r\n              />\r\n              <Canvas rows={this.state.rows}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}